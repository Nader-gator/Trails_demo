<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Router Demo</title>
  <link rel="stylesheet" href="assets/prism.css">
  <script src='assets/prism.js'></script>
  <link rel="stylesheet" href="assets/stylesheet.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src='assets/script.js'></script>
  <link rel="icon" type="image/png" href="./assets/favicon.png" />
</head>
<body>
<div class="main-head">
  <div class='title'>

<h1>Router Demo</h1>
    <a href="/">Go Back home</a>

<h2>This is a simple code demo for the Router</h2>
<h1>TODO: nested route</h1>
<p style='border-top: 1px solid black;padding-top:20px;font-size:20px;text-align:left;margin-left: 2em;' >Trails handles routing similiar to Rails. for each route, there is a http method, a pattern or url, controller and action for the controller here is a snippet of Flash Controller from the Flash Demo</p>
</div>
<div class='fdemos'>
  <div class='flash'>
  
    <p style='font-size: 20px;line-height:1.5em;margin-right: 5%;'>
    Routing is done by two classes. A single <code>Route</code> class and a <code>Router</code> Class. Router class holds an array of all the created Routes and also handles creating them. here is a snippet of how each route is created.
  </p>
  </div>
  </div>
  <div class='fcode'>
  
  <pre >
    <code class="language-ruby">
router.draw do
  get Regexp.new("^/$"), MainPageController, :index
  get Regexp.new("^/flash$"), FlashController, :index
  post Regexp.new("^/flash$"), FlashController, :create
end
    </code>
  </pre>
</div>

    <p style='border-top: 1px solid black;padding-top:20px;font-size:20px;text-align:left;margin-left: 2em;'>Every Route called in the <code>#draw</code> function is called with one of the corresponding http methods, which trigger #add_route, which creates and store a Route Object</p>


  <div class='fcode'>
    <pre style='width: 50vw;'><code class="language-ruby">
def draw(&proc)
  instance_eval(&proc)
end

[:get, :post, :put, :delete].each do |http_method|
  define_method(http_method) do |pattern,controller_class,action_name|
    add_route(pattern,http_method,controller_class,action_name)
  end
end
      </code></pre>
  </div>

  <p style='border-top: 1px solid black;padding-top:20px;font-size:20px;text-align:left;margin-left: 2em;'>Finally, when the Rack server runs, it will run every single request-response cycle through the router, which in turn matches a route to the url</p>
  <div class='fcode'>
  
    <pre style='width: 40vw' >
      <code  class="language-ruby">
#...Rack server:
  app = Rack::Builder.new do
    use Static
    run app
  end.to_app

  Rack::Server.start(
  app: app,
  Port: ENV['PORT']
  )

#...Router#run:

def run(req, res)
  route = match(req)
  if route.nil?
    res.status = 404
    res.write("404 NOT FOUND")
  else
    route.run(req,res)
  end

end

#...Route#run: 
def run(req, res)
  data = @pattern.match(req.path)

  params = Hash[data.names.zip(data.captures)]
  controller = controller_class.new(req,res,params)
  controller.invoke_action(self.action_name)
end
</code></pre>
    </div>
</body>
</div>
</html>