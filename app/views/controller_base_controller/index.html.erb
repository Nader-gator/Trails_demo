<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Controller Base Demo</title>
  <link rel="stylesheet" href="assets/prism.css">
  <script src='assets/prism.js'></script>
  <link rel="stylesheet" href="assets/stylesheet.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src='assets/script.js'></script>
	<link rel="icon" type="image/png" href="./assets/favicon.png" />

</head>
<body>

<div class="main-head">
  <div class='title'>
<h1>ControllerBase code Demo</h1>
      <a href="/">Go Back home</a>

<h2>This is a code demo for the heart of what makes Trails run, the <code>ControllerBase</code> class</h2>
</div>
  <br><br>

<div class='fdemos'>
<div class='flash'>
<br>
<p style='font-size: 20px;line-height:1.5em;'>ControllerBase class serves a simple function, make available methods to properly pass an html file to the Rack server to be rendered. It also keeps instances of <code>Session</code> and <code>Flash</code> classes. Another important function of this class is passing on the instance variable to <code>ERB</code> files to be rendered</p>
<br>
<p style='font-size: 21px;line-height:1.5em;'>ControllerBase is initialized taking in the request and response from Rack, and any params passed on by the router(such as wild card params in the URL)</p>
</div>
</div>

<div class='fcode'>

<pre >
<code class="language-ruby;">
class ControllerBase
  attr_reader :req, :res, :params,:session
  attr_accessor :response_built

  def initialize(req, res,params = {})
    @req, @res = req, res
    @response_built = false
    @params = params.merge(req.params)
  end

  def already_built_response?
    @response_built
  end

  def session
    @session ||= Session.new(@req)
  end

  def invoke_action(name)
    self.send(name)
    render(name) unless already_built_response?
  end

  def flash
    @flash ||= Flash.new(@req)
    @flash
  end
</code>
</pre>
</div>
<p style='border-top: 1px solid black;padding-top:20px;font-size:20px;text-align:left;margin-left: 2em;'>When <code>#render</code> is called on the controller, the controller finds the html view corresponding to the controller name, and then generates an ERB file, and finally binds it to the local variables so that instance varibles can be used to render content passed on in the controllers</p>

<div class='fcode'>
<pre style= 'width: 60vw'>
<code class="language-ruby;">
  def render_content(content, content_type)
      self.redirect_response_prep
      @res.write(content)
      @res['Content-Type'] = content_type
    nil
  end

  def render(template_name)
    path = File.dirname(__FILE__)
    template_path = File.join(path,"..",'views',self.class.name.underscore,
    "#{template_name}.html.erb")
    template = File.read(template_path)
    render_content(ERB.new(template).result(binding),"text/html")
  end
</code>
</pre>
</div>
<p style='border-top: 1px solid black;padding-top:20px;font-size:20px;text-align:left;margin-left: 2em;' >finally, as it was indicated in the Flash and Session demos, before each render happens, <code>#redirect_response_prep</code> is called to store both Session cookies and Flash, and also raise errors for double renders</p>
<div class='fcode'>

<pre style= 'width: 50vw'>
<code class="language-ruby;">
def redirect_response_prep
  raise "Double render error" if self.already_built_response?
  self.response_built = true
  self.session.store_session(@res)
  self.flash.store_flash(@res)
end
</code>
</pre>
</div>
</body>
</div>
</html>