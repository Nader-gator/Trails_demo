<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>RecordKeeper Demo</title>
  <link rel="stylesheet" href="assets/prism.css">
  <script src='assets/prism.js'></script>
</head>
<body>

<h1>Static Content Server Demo</h1>
<h2>This is a demo of static content server portion of Trails</h2>
<p>The static content server allows the server to serve any file stored in the Assets directory of the server, allowing for css, images and other content to be used on the server</p>
<a href="./assets/astro-sloth.jpg">Click on this link to open an image hosted on this server</a>

<p>Static content in Trails is served using a middleware class called <code class='language-ruby'>Static</code> This class holds the folder name of the assets that will be served, and also check if a file requested exists. If the file exists, it calls on the <code class='language-ruby'>FileServer</code>class to create a new Rack response.</p>
<pre style="width: 50%;">
<code class="language-ruby">
class Static
  attr_reader :app, :root, :file_server
  def initialize(app)
    @app = app
    @root = :assets
    @file_server = FileServer.new(@root)
  end

  def call(env)
    req = Rack::Request.new(env)
    path = req.path

    if self.serve?(path)
      res = self.file_server.call(env)
    else
      res = self.app.call(env)
    end
    return res
  end

  def serve?(path)
    path.index("/#{self.root}")
  end
end
</code>
</pre>

<p><code class='language-ruby'>FileServer</code>class has one primary function, take in a path, such as <code>Assets/image</code> create a file path relative to the source code of the middleware, and finally read and serve the file through a rack response. This means the Rack response must parse the MIME type from the files extension. This needs to be done manually for each new filetype that is to be served</p>

<pre style="width: 50%;">
<code class="language-ruby">
class FileServer
  MIME_TYPES = {
    '.jpg' => 'image/jpeg',
    '.css' => 'text/css'
  }

  def initialize(root)
    @root = root
  end

  def call(env)
    res = Rack::Response.new
    file_name = file_name(env)

    if File.exist?(file_name)
      serve_file(file_name, res)
    else
      res.status = 404
      res.write("File not found")
    end
    res
  end

 def serve_file(file_name, res)
    extension = File.extname(file_name)
    content_type = MIME_TYPES[extension]
    file = File.read(file_name)
    res["Content-type"] = content_type
    res.write(file)
  end

  def file_name(env)
    req = Rack::Request.new(env)
    path = req.path
    dir = File.dirname(__FILE__)
    File.join(dir, '..','/..', path)
  end
end
</code>
</pre>
</body>
</html>